Identity and Access Management
AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage
AWS users and groups, and use permissions to allow and deny their access to AWS resources. IAM is a feature of your AWS account offered at no
additional charge. You will be charged only for use of other AWS services by your users.

Features:
1. Enhanced security
   IAM enables security best practices by allowing you to grant unique security credentials to users and groups to specify which AWS service APIs and
   resources they can access. IAM is secure by default; users have no access to AWS resources until permissions are explicitly granted.

2. Granular control
   IAM provides the granularity to control a userâ€™s access to specific AWS services and resources using permissions. For example, terminating EC2
   instances or reading the contents of an Amazon S3 bucket.

3. Temporary credentials
   In addition to defining access permissions directly to users and groups, IAM lets you create roles. Roles allow you to define a set of permissions
   and then let authenticated users or EC2 instances assume them, increasing your security posture by granting temporary access to the resources you
   define.

4. Analyze Access
   IAM helps you analyze access across your AWS environment. Your security teams and administrators can use IAM Access Analyzer to identify resources
   that can be accessed from outside an AWS account.

5. Flexible security credential management
   IAM allows you to authenticate users in several ways, depending on how they want to use AWS services. You can assign a range of security
   credentials including passwords, key pairs, and X.509 certificates. You can also enforce multi-factor authentication (MFA) on users who access
   the AWS Management Console or use APIs.

6. Leverage external identity systems
   You can use IAM to grant your employees and applications access to the AWS Management Console and to AWS service APIs, using your existing identity
   systems. AWS supports federation from corporate systems like Microsoft Active Directory as well as standards-based identity providers.

7. Seamlessly integrated into AWS services
   IAM is integrated into most AWS services. This provides the ability to define access controls from one place in the AWS Management Console that
   will take effect throughout your AWS environment.


Group:
A group is a collection of IAM users. Manage group membership as a simple list:
Add users to or remove them from a group.
A user can belong to multiple groups.
Groups cannot belong to other groups.
Groups can be granted permissions using access control policies. This makes it easier to manage permissions for a collection of users, rather than
having to manage permissions for each individual user.
Groups do not have security credentials, and cannot access web services directly; they exist solely to make it easier to manage user permissions.
For details, see Working with Groups and Users.

Users:
Users are global entities, like an AWS account is today. User names are just ASCII strings that are unique within a given AWS account. You can assign
names using any naming convention you choose, including email addresses. You can enforce strong passwords by requiring minimum length or at least one
number. You can also enforce automatic password expiration, prevent re-use of old passwords, and require a password reset upon the next AWS sign-in.
All limits are on the AWS account as a whole and not on users. if your AWS account has a limit of 20 Amazon EC2 instances, IAM users with EC2
permissions can start instances up to the limit. You cannot limit what an individual user can do.


IAM Role:
An IAM role is an IAM entity that defines a set of permissions for making AWS service requests.  IAM roles are not associated with a specific user or
group. Instead, trusted entities assume roles, such as IAM users, applications, or AWS services such as EC2.

IAM roles allow you to delegate access with defined permissions to trusted entities without having to share long-term access keys. You can use IAM
roles to delegate access to IAM users managed within your account, to IAM users under a different AWS account, or to an AWS service such as EC2.

An IAM user has permanent long-term credentials and is used to directly interact with AWS services. An IAM role does not have any credentials and
cannot make direct requests to AWS services. IAM roles are meant to be assumed by authorized entities, such as IAM users, applications, or an AWS
service such as EC2.


What is the difference between an IAM role and an IAM user?
An IAM user has permanent long-term credentials and is used to directly interact with AWS services. An IAM role does not have any credentials and
cannot make direct requests to AWS services. IAM roles are meant to be assumed by authorized entities, such as IAM users, applications, or an AWS
service such as EC2 or lambda.

What is IAM roles for EC2 instances?
IAM roles for EC2 instances enables your applications running on EC2 to make requests to AWS services such as Amazon S3, Amazon SQS, and Amazon SNS
without you having to copy AWS access keys to every instance. IAM roles for EC2 instances provides the following features:
1. AWS temporary security credentials to use when making requests from running EC2 instances to AWS services.
2. Automatic rotation of the AWS temporary security credentials.
3. Granular AWS service permissions for applications running on EC2 instances.

What problem does IAM roles for EC2 instances solve?
IAM roles for EC2 instances simplifies management and deployment of AWS access keys to EC2 instances. Using this feature, you associate an IAM role
with an instance. Then your EC2 instance provides the temporary security credentials to applications running on the instance, and the applications
can use these credentials to make requests securely to the AWS service resources defined in the role.

What is a service-linked role?
A service-linked role is a type of role that links to an AWS service (also known as a linked service) such that only the linked service can assume
the role. Using these roles, you can delegate permissions to AWS services to create and manage AWS resources on your behalf.

Can I assume a service-linked role?
No. A service-linked role can be assumed only by the linked service. This is the reason why the trust policy of a service-linked role cannot be
modified.

Can I delete a service-linked role?
Yes. If you no longer want an AWS service to perform actions on your behalf, you can delete its service-linked role. Before you delete the role, you
must delete all AWS resources that depend on the role. This step ensures that you do not inadvertently delete a role required for your AWS resources
to function properly.

How do I delete a service-linked role?
You can delete a service-linked role from the IAM console. Choose Roles in the navigation pane, choose the service-linked role that you want to
delete, and choose Delete role. (Note: For Amazon Lex, you must use the Amazon Lex console to delete the service-linked role.)
